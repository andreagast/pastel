openapi: 3.0.3
info:
  title: Pastel
  version: 1.0.0
  description: Example project for an example cake store
  license:
    name: MIT
  contact:
    name: andreagast
    url: https://github.com/andreagast
servers:
  - url: http://127.0.0.1:5000
    description: dev server
  - url: http://127.0.0.1:8000
    description: docker server
tags:
  - name: sale
  - name: product
paths:
  /api/sale:
    post:
      summary: Add a new cake on sale
      description: Add a new cake on sale
      tags:
        - sale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSaleDto'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDto'
        '422':
          description: invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    get:
      summary: Get all the sales, included expired ones
      description: Get all the sales, included expired ones
      tags:
        - sale
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: how many
                  sales:
                    type: array
                    items:
                      $ref: '#/components/schemas/SaleDto'

  /api/sale/available:
    get:
      summary: Get all the available sales
      description: Get all the available sales
      tags:
        - sale
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableSalesDto'

  /api/sale/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: integer
    delete:
      summary: Remove the sale
      description: Remove the sale
      tags:
        - sale
      responses:
        '204':
          description: ok
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'

  /api/product:
    get:
      summary: Retrieve all the products
      description: Retrieve all the products
      tags:
        - product
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductDto'
    post:
      summary: Add a new product
      description: Add a new product
      tags:
        - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '422':
          description: invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'

  /api/product/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a product
      description: Get a product
      tags:
        - product
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    put:
      summary: Update a product
      description: Update a product
      tags:
        - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '422':
          description: invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
    delete:
      summary: Delete a product
      description: Delete a product
      tags:
        - product
      responses:
        '204':
          description: ok
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
  /api/product/{id}/ingredients:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get the ingredients of a product
      description: Get the ingredients of a product
      tags:
        - product
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientDto'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'

components:
  schemas:
    ProductDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/IngredientDto'
        created:
          type: string
          format: timestamp
        updated:
          type: string
          format: timestamp
    IngredientDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        um:
          type: string
        qty:
          type: integer
        created:
          type: string
          format: timestamp
        updated:
          type: string
          format: timestamp
    CreateProductDto:
      type: object
      properties:
        name:
          type: string
        price:
          type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/IngredientDto'
    CreateSaleDto:
      type: object
      properties:
        product_id:
          type: string
        qty:
          type: integer
    SaleDto:
      type: object
      properties:
        id:
          type: string
        product_id:
          type: string
        production_date:
          type: string
          format: date
        qty:
          type: number
        created:
          type: string
          format: timestamp
        updated:
          type: string
          format: timestamp
    AvailableSalesDto:
      type: object
      properties:
        sale:
          type: object
          properties:
            fresh:
              type: array
              items:
                $ref: '#/components/schemas/SaleDto'
            half:
              type: array
              items:
                $ref: '#/components/schemas/SaleDto'
            stale:
              type: array
              items:
                $ref: '#/components/schemas/SaleDto'
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDto'
    ErrorDto:
      type: object
      properties:
        message:
          type: string
