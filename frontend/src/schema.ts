/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/sale': {
    /**
     * Get all the sales, included expired ones
     * @description Get all the sales, included expired ones
     */
    get: {
      /**
       * Get all the sales, included expired ones
       * @description Get all the sales, included expired ones
       */
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': {
              /** @description how many */
              count?: number;
              sales?: components['schemas']['SaleDto'][];
            };
          };
        };
      };
    };
    /**
     * Add a new cake on sale
     * @description Add a new cake on sale
     */
    post: {
      /**
       * Add a new cake on sale
       * @description Add a new cake on sale
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateSaleDto'];
        };
      };
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': components['schemas']['SaleDto'];
          };
        };
        /** @description invalid payload */
        422: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
  };
  '/api/sale/available': {
    /**
     * Get all the available sales
     * @description Get all the available sales
     */
    get: {
      /**
       * Get all the available sales
       * @description Get all the available sales
       */
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': components['schemas']['AvailableSalesDto'];
          };
        };
      };
    };
  };
  '/api/sale/{id}': {
    /**
     * Remove the sale
     * @description Remove the sale
     */
    delete: {
      /**
       * Remove the sale
       * @description Remove the sale
       */
      responses: {
        /** @description ok */
        204: never;
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
    parameters: {
      path: {
        id: number;
      };
    };
  };
  '/api/product': {
    /**
     * Retrieve all the products
     * @description Retrieve all the products
     */
    get: {
      /**
       * Retrieve all the products
       * @description Retrieve all the products
       */
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': {
              count?: number;
              products?: components['schemas']['ProductDto'][];
            };
          };
        };
      };
    };
    /**
     * Add a new product
     * @description Add a new product
     */
    post: {
      /**
       * Add a new product
       * @description Add a new product
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateProductDto'];
        };
      };
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': components['schemas']['ProductDto'];
          };
        };
        /** @description invalid payload */
        422: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
  };
  '/api/product/{id}': {
    /**
     * Get a product
     * @description Get a product
     */
    get: {
      /**
       * Get a product
       * @description Get a product
       */
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': components['schemas']['ProductDto'];
          };
        };
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
    /**
     * Update a product
     * @description Update a product
     */
    put: {
      /**
       * Update a product
       * @description Update a product
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['ProductDto'];
        };
      };
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': components['schemas']['ProductDto'];
          };
        };
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
        /** @description invalid payload */
        422: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
    /**
     * Delete a product
     * @description Delete a product
     */
    delete: {
      /**
       * Delete a product
       * @description Delete a product
       */
      responses: {
        /** @description ok */
        204: never;
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
    parameters: {
      path: {
        id: number;
      };
    };
  };
  '/api/product/{id}/ingredients': {
    /**
     * Get the ingredients of a product
     * @description Get the ingredients of a product
     */
    get: {
      /**
       * Get the ingredients of a product
       * @description Get the ingredients of a product
       */
      responses: {
        /** @description ok */
        200: {
          content: {
            'application/json': components['schemas']['IngredientDto'][];
          };
        };
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorDto'];
          };
        };
      };
    };
    parameters: {
      path: {
        id: number;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ProductDto: {
      id?: string;
      name?: string;
      price?: string;
      ingredients?: components['schemas']['IngredientDto'][];
      /** Format: timestamp */
      created?: string;
      /** Format: timestamp */
      updated?: string;
    };
    IngredientDto: {
      id?: string;
      name?: string;
      um?: string;
      qty?: number;
      /** Format: timestamp */
      created?: string;
      /** Format: timestamp */
      updated?: string;
    };
    CreateProductDto: {
      name?: string;
      price?: string;
      ingredients?: components['schemas']['IngredientDto'][];
    };
    CreateSaleDto: {
      product_id?: string;
      qty?: number;
    };
    SaleDto: {
      id?: string;
      product_id?: string;
      /** Format: date */
      production_date?: string;
      qty?: number;
      /** Format: timestamp */
      created?: string;
      /** Format: timestamp */
      updated?: string;
    };
    AvailableSalesDto: {
      sale?: {
        fresh?: components['schemas']['SaleDto'][];
        half?: components['schemas']['SaleDto'][];
        stale?: components['schemas']['SaleDto'][];
      };
      products?: components['schemas']['ProductDto'][];
    };
    ErrorDto: {
      message?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
